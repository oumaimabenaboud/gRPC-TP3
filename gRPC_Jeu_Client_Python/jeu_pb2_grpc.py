# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import jeu_pb2 as jeu__pb2


class JeuStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_stream(
                '/Jeu/Start',
                request_serializer=jeu__pb2.Empty.SerializeToString,
                response_deserializer=jeu__pb2.Result.FromString,
                )
        self.Guess = channel.stream_stream(
                '/Jeu/Guess',
                request_serializer=jeu__pb2.GuessRequest.SerializeToString,
                response_deserializer=jeu__pb2.Result.FromString,
                )
        self.Stop = channel.unary_unary(
                '/Jeu/Stop',
                request_serializer=jeu__pb2.Empty.SerializeToString,
                response_deserializer=jeu__pb2.Result.FromString,
                )


class JeuServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Start(self, request, context):
        """The server generates a random number between 1 and 1000
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Guess(self, request_iterator, context):
        """The client guesses a number and the server responds with a hint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """The server announces the winner and the game is over
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JeuServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_stream_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=jeu__pb2.Empty.FromString,
                    response_serializer=jeu__pb2.Result.SerializeToString,
            ),
            'Guess': grpc.stream_stream_rpc_method_handler(
                    servicer.Guess,
                    request_deserializer=jeu__pb2.GuessRequest.FromString,
                    response_serializer=jeu__pb2.Result.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=jeu__pb2.Empty.FromString,
                    response_serializer=jeu__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Jeu', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Jeu(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Jeu/Start',
            jeu__pb2.Empty.SerializeToString,
            jeu__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Guess(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Jeu/Guess',
            jeu__pb2.GuessRequest.SerializeToString,
            jeu__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Jeu/Stop',
            jeu__pb2.Empty.SerializeToString,
            jeu__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
